"""
Django settings for meetadoctor project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os

from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i*ewj01+h36@%()4dk2zwliq0&kd_nitpx-&=-c0)6g3ejnnqt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS specifies the host/domain names that this Django site can serve.
# An empty list means all hostnames are allowed.
ALLOWED_HOSTS = []

# SITE_ID specifies the ID of the current site in the database. This is used in Django sites framework.
SITE_ID = 1

# WEBSITE_URL is the base URL of the website, typically used for constructing links.
WEBSITE_URL = 'https://localhost:8000'

# SIMPLE_JWT is the configuration for the Simple JWT authentication package.
SIMPLE_JWT = {
    # ACCESS_TOKEN_LIFETIME defines the lifespan of access tokens.
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),

    # REFRESH_TOKEN_LIFETIME defines the lifespan of refresh tokens.
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),

    # ROTATE_FRESH_TOKEN determines whether to rotate refresh tokens on usage.
    "ROTATE_FRESH_TOKEN": False,

    # BLACKLIST_AFTER_ROTATION specifies whether the previous refresh token should be blacklisted after rotation.
    "BLACKLIST_AFTER_ROTATION": False,

    # UPDATE_LAST_LOGIN indicates whether to update the last login timestamp on user authentication.
    "UPDATE_LAST_LOGIN": True,

    # SIGNING_KEY is the key used to sign the JWT tokens.
    "SIGNING_KEY": "acomplexkey",

    # ALGORITHM defines the algorithm used for signing JWT tokens.
    "ALGORITHM": "HS512",
}

# ACCOUNT_EMAIL_REQUIRED determines whether an email address is required to create an account.
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = True
# ACCOUNT_USERNAME_REQUIRED determines whether an username is required to create an account.
ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_AUTHENTICATion_METHOD determines which method is used by users who attempt to access login or registration pages.
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION controls if email verification is required after registration.
ACCOUNT_EMAIL_VERIFICATION = 'none'

# Django Rest Framework (DRF) related settings for API configurations.
REST_FRAMEWORK = {
    # Authentication classes to verify users
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],

    # Default permission classes to control access to the API endpoints.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# CORS (Cross-Origin Resource Sharing) settings for allowing cross-origin requests.
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:3000",  # Local frontend for development
    "http://127.0.0.1:8000",  # Local backend for development
]


REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": False
}

# Application definition

INSTALLED_APPS = [
    'users',
    'listing',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'allauth',
    'allauth.account',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meetadoctor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meetadoctor.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC+2'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
